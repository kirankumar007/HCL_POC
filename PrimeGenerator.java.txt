package table;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.lang.management.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;

import oshi.SystemInfo;
import oshi.hardware.Baseboard;
import oshi.hardware.CentralProcessor;
import oshi.hardware.ComputerSystem;
import oshi.hardware.Firmware;
import oshi.hardware.GlobalMemory;
import oshi.hardware.HardwareAbstractionLayer;
import oshi.hardware.CentralProcessor.TickType;
import oshi.software.os.OSProcess;
import oshi.software.os.OperatingSystem;
import oshi.software.os.OperatingSystem.ProcessSort;
import oshi.util.FormatUtil;
import oshi.util.Util;

public class PrimeGenerator {
		  private static final int THREADS = 5;
		  private static CountDownLatch ct = new CountDownLatch(THREADS);
		  private static AtomicLong total = new AtomicLong();
       
		            public static void main(String[] args) 
		            		throws InterruptedException {
		            	long elapsedTime = System.nanoTime();
		    		    for (int i = 0; i < THREADS; i++) {
		    		      Thread thread = new Thread() {
		    		        public void run() {
		    		          total.addAndGet(measureThreadCpuTime());
		    		          ct.countDown();
		    		        }
		    		      };
		    		      thread.start();
		    		    }
		    		    ct.await();
		    		    elapsedTime = System.nanoTime() - elapsedTime;
		    		    System.out.println("Total elapsed time " + elapsedTime);
		    		    System.out.println("Total thread CPU time " + total.get());
		    		    double factor = total.get();
		    		    factor /= elapsedTime;
		    		    System.out.printf("Factor: %.2f%n", factor);
		    		  

		
		    		int processors = Runtime.getRuntime().availableProcessors();  
				    System.out.println("Available Processors = " +processors);
				    
				    SystemInfo si = new SystemInfo();
				    HardwareAbstractionLayer hal = si.getHardware();
				    OperatingSystem os = si.getOperatingSystem();
				    
				    System.out.println("Checking computer system...");
			        printComputerSystem(hal.getComputerSystem());

			        System.out.println("Checking Processor...");
			        printProcessor(hal.getProcessor());

			        System.out.println("Checking Memory...");
			        printMemory(hal.getMemory());

			        System.out.println("Checking CPU...");
			        printCpu(hal.getProcessor());

			        System.out.println("Checking Processes...");
			        printProcesses(os, hal.getMemory());
			        	        
			        int max = 10000;

				            System.out.println("Generating Prime numbers between 1 and 10000");

				            ArrayList<Integer> list = new ArrayList<Integer>();

				            // loop through the numbers one by one
				            for (int n = 1; n < max; n++) {
				                boolean prime = true;
				                // analyzes if n is prime

				                for (int j = 2; j < n; j++) {
				                    if (n % j == 0) {
				                        prime = false;
				                        break; // exit the inner for loop
				                        }
				                }
				                if (prime && n != 1) {
				                	 System.out.print(n +"\n");
				                    list.add(n);
				                }
				            }
				        }       
		            
		            private static void printComputerSystem(final ComputerSystem computerSystem) {

		                System.out.println("manufacturer: " + computerSystem.getManufacturer());
		                System.out.println("model: " + computerSystem.getModel());
		                System.out.println("serialnumber: " + computerSystem.getSerialNumber());
		                final Firmware firmware = computerSystem.getFirmware();
		                System.out.println("firmware:");
		                System.out.println("  manufacturer: " + firmware.getManufacturer());
		                System.out.println("  name: " + firmware.getName());
		                System.out.println("  description: " + firmware.getDescription());
		                System.out.println("  version: " + firmware.getVersion());
		                //System.out.println("  release date: " + (firmware.getReleaseDate() == null ? "unknown"
		                //        : firmware.getReleaseDate() == null ? "unknown" : FormatUtil.formatDate(firmware.getReleaseDate())));
		                final Baseboard baseboard = computerSystem.getBaseboard();
		                System.out.println("baseboard:");
		                System.out.println("  manufacturer: " + baseboard.getManufacturer());
		                System.out.println("  model: " + baseboard.getModel());
		                System.out.println("  version: " + baseboard.getVersion());
		                System.out.println("  serialnumber: " + baseboard.getSerialNumber());
		            }

		            private static void printProcessor(CentralProcessor processor) {
		                System.out.println(processor);
		                System.out.println(" " + processor.getPhysicalProcessorCount() + " physical CPU(s)");
		                System.out.println(" " + processor.getLogicalProcessorCount() + " logical CPU(s)");
		               // System.out.println("Identifier: " + processor.getIdentifier());
		               // System.out.println("ProcessorID: " + processor.getProcessorID());
		            }

		            private static void printMemory(GlobalMemory memory) {
		                System.out.println("Memory: " + FormatUtil.formatBytes(memory.getAvailable()) + "/"
		                        + FormatUtil.formatBytes(memory.getTotal()));
		                System.out.println("Swap used: " + FormatUtil.formatBytes(memory.getSwapUsed()) + "/"
		                        + FormatUtil.formatBytes(memory.getSwapTotal()));
		            }

		            private static void printCpu(CentralProcessor processor) {
		                System.out.println("Uptime: " + FormatUtil.formatElapsedSecs(processor.getSystemUptime()));

		                long[] prevTicks = processor.getSystemCpuLoadTicks();
		                System.out.println("CPU, IOWait, and IRQ ticks @ 0 sec:" + Arrays.toString(prevTicks));
		                // Wait a second...
		                Util.sleep(1000);
		                long[] ticks = processor.getSystemCpuLoadTicks();
		                System.out.println("CPU, IOWait, and IRQ ticks @ 1 sec:" + Arrays.toString(ticks));
		                long user = ticks[TickType.USER.getIndex()] - prevTicks[TickType.USER.getIndex()];
		                long nice = ticks[TickType.NICE.getIndex()] - prevTicks[TickType.NICE.getIndex()];
		                long sys = ticks[TickType.SYSTEM.getIndex()] - prevTicks[TickType.SYSTEM.getIndex()];
		                long idle = ticks[TickType.IDLE.getIndex()] - prevTicks[TickType.IDLE.getIndex()];
		                long iowait = ticks[TickType.IOWAIT.getIndex()] - prevTicks[TickType.IOWAIT.getIndex()];
		                long irq = ticks[TickType.IRQ.getIndex()] - prevTicks[TickType.IRQ.getIndex()];
		                long softirq = ticks[TickType.SOFTIRQ.getIndex()] - prevTicks[TickType.SOFTIRQ.getIndex()];
		                long steal = ticks[TickType.STEAL.getIndex()] - prevTicks[TickType.STEAL.getIndex()];
		                long totalCpu = user + nice + sys + idle + iowait + irq + softirq + steal;

		                System.out.format(
		                        "User: %.1f%% Nice: %.1f%% System: %.1f%% Idle: %.1f%% IOwait: %.1f%% IRQ: %.1f%% SoftIRQ: %.1f%% Steal: %.1f%%%n",
		                        100d * user / totalCpu, 100d * nice / totalCpu, 100d * sys / totalCpu, 100d * idle / totalCpu,
		                        100d * iowait / totalCpu, 100d * irq / totalCpu, 100d * softirq / totalCpu, 100d * steal / totalCpu);
		                System.out.format("CPU load: %.1f%% (counting ticks)%n", processor.getSystemCpuLoadBetweenTicks() * 100);
		                System.out.format("CPU load: %.1f%% (OS MXBean)%n", processor.getSystemCpuLoad() * 100);
		                double[] loadAverage = processor.getSystemLoadAverage(3);
		                System.out.println("CPU load averages:" + (loadAverage[0] < 0 ? " N/A" : String.format(" %.2f", loadAverage[0]))
		                        + (loadAverage[1] < 0 ? " N/A" : String.format(" %.2f", loadAverage[1]))
		                        + (loadAverage[2] < 0 ? " N/A" : String.format(" %.2f", loadAverage[2])));
		                // per core CPU
		                StringBuilder procCpu = new StringBuilder("CPU load per processor:");
		                double[] load = processor.getProcessorCpuLoadBetweenTicks();
		                for (double avg : load) {
		                    procCpu.append(String.format(" %.1f%%", avg * 100));
		                }
		                System.out.println(procCpu.toString());
		            }

		            private static void printProcesses(OperatingSystem os, GlobalMemory memory) {
		                System.out.println("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());
		                // Sort by highest CPU
		                List<OSProcess> procs = Arrays.asList(os.getProcesses(5, ProcessSort.CPU));

		                System.out.println("   PID  %CPU %MEM       VSZ       RSS Name");
		                for (int i = 0; i < procs.size() && i < 5; i++) {
		                    OSProcess p = procs.get(i);
		                    System.out.format(" %5d %5.1f %4.1f %9s %9s %s%n", p.getProcessID(),
		                            100d * (p.getKernelTime() + p.getUserTime()) / p.getUpTime(),
		                            100d * p.getResidentSetSize() / memory.getTotal(), FormatUtil.formatBytes(p.getVirtualSize()),
		                            FormatUtil.formatBytes(p.getResidentSetSize()), p.getName());
		                }
		            }
		            
		    		  private static long measureThreadCpuTime() {
			    		    ThreadMXBean tm = ManagementFactory.getThreadMXBean();
			    		    long cpuTime = tm.getCurrentThreadCpuTime();
			    		    long total=0;
			    		    for (int i = 0; i < 1000 * 1000 * 1000; i++) {
			    		      total += i;
			    		      total *= 10;
			    		    }
			    		    cpuTime = tm.getCurrentThreadCpuTime() - cpuTime;
			    		    System.out.println(total + " ... " + Thread.currentThread() +
			    		        ": cpuTime = " + cpuTime);
			    		    return cpuTime;
			    		  }

				    }
